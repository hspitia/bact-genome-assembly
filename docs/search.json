[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ensamblaje y Anotación de Genomas Bacterianos",
    "section": "",
    "text": "Bienvenid@\nEsta es una guía de Bioinformática para ensamblar y anotar genomas bacterianos a partir de muestras de aislamientos secuenciados con tecnologías de secuenciación de segunda generación (Next Generation Sequencing, NGS)."
  },
  {
    "objectID": "index.html#convenciones",
    "href": "index.html#convenciones",
    "title": "Ensamblaje y Anotación de Genomas Bacterianos",
    "section": "Convenciones",
    "text": "Convenciones\nEl código fuente, nombres de archivos, y los comandos y su salida, están formateados en fuente monoespaciada. Por ejemplo, ls, /ruta/al/archivo.txt o el siguiente comando y su salida:\n\nls -l /home\n\ntotal 4\ndrwxr-xr-x 40 hector hector 4096 mar 12 16:52 hector\n\n\nLas palabras en idiomas diferentes al español aparecen en cursiva, p. ej. kernel, o dash.\n\nBloques especiales\nTextos con información de especial atención se presentan en bloques (recuadros) especiales que se diferencian por su color. Existen cinco tipos de bloques especiales:\n\n\n\n\n\n\nNota\n\n\n\nEste es un ejemplo de una nota.\n\n\n\n\n\n\n\n\nImportante\n\n\n\nEste es un texto que corresponde a una información importante.\n\n\n\n\n\n\n\n\nTip\n\n\n\nAsí se ven los consejos o trucos\n\n\n\n\n\n\n\n\nPrecaución\n\n\n\nEste bloque denota una información de precaución\n\n\n\n\n\n\n\n\nAdvertencia\n\n\n\nEste bloque denota una información de advertencia."
  },
  {
    "objectID": "setup.html#estructura-de-directorios",
    "href": "setup.html#estructura-de-directorios",
    "title": "1  Preparación del entorno de trabajo",
    "section": "1.1 Estructura de directorios",
    "text": "1.1 Estructura de directorios\nPara que cada proyecto esté organizado en carpetas independientes, primero crearemos el directorio para los proyectos. Abra una terminal y ejecute las siguientes órdenes:\n\ncd $HOME\nmkdir proyectos\n\n\n\n\n\n\n\nImportante\n\n\n\nA partir de aquí, se asume que usted debe ejecutar todos los comandos mostrados en la terminal.\n\n\nAhora, se creará la estructura para nuestro proyecto de ensamblaje dentro del directorio proyectos. En la estructura se contemplan subdirectorios de datos, calidad y resultados:\n\nmkdir -p proyectos/ensamblaje/{datos,resultados,scripts}\nmkdir -p proyectos/ensamblaje/datos/qc/fastqc\nmkdir -p proyectos/ensamblaje/resultados/{00_datos_limpios,01_ensamblaje,02_ensamblaje_qc,03_anotacion}\nmkdir -p proyectos/ensamblaje/resultados/00_datos_limpios/qc/{fastp,fastqc}\n\nLa estructura final del directorio del directorio del proyecto se puede ver con el comando tree:\n\ntree -L 4 --charset HTML proyectos/ensamblaje\n\n\n\nproyectos/ensamblaje\n|-- datos\n|   `-- qc\n|       `-- fastqc\n|-- resultados\n|   |-- 00_datos_limpios\n|   |   `-- qc\n|   |       |-- fastp\n|   |       `-- fastqc\n|   |-- 01_ensamblaje\n|   |-- 02_ensamblaje_qc\n|   `-- 03_anotacion\n`-- scripts\n\n12 directories, 0 files"
  },
  {
    "objectID": "setup.html#ambiente-conda-e-instalación-de-programas",
    "href": "setup.html#ambiente-conda-e-instalación-de-programas",
    "title": "1  Preparación del entorno de trabajo",
    "section": "1.2 Ambiente Conda e instalación de programas",
    "text": "1.2 Ambiente Conda e instalación de programas\nUna manera eficiente y rápida para instalar todos los programas necesarios para el ensamblaje y anotación de los genomas, consiste en usar Conda1, un software de libre distribución para administrar ambientes de software e instalación de programas.\n\n1.2.1 Instalación Conda: mambaforge\nInstalaremos una implementación liviana de Conda de la comunidad conda-forge2 llamada miniforge3, que además viene con el gestor de paquetes mamba, el cual es más rápido y eficiente que conda.\nPrimero, descarguemos el instalador:\n\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh\n\n\n\n\n\n\n\nNota\n\n\n\nToda la información acerca de miniforge y otros instaladores están disponibles en https://github.com/conda-forge/miniforge\n\n\nAhora iniciemos el instalador:\n\n# Adicionar permiso de ejecución\nchmod +x Mambaforge-Linux-x86_64.sh\n\n# Ejecutar el instalador\n./Mambaforge-Linux-x86_64.sh\n\nAl ejecutar el anterior comando, verá un mensaje de los términos de la licencia como este:\n\n\nWelcome to Mambaforge 22.11.1-4\n\nIn order to continue the installation process, please review the license\nagreement.\nPlease, press ENTER to continue\n&gt;&gt;&gt;\n\n\nPresione la tecla &lt;ENTER&gt; varias veces hasta que el instalador solicite aceptar los términos de la licencia:\n\n\nDo you accept the license terms? [yes|no]\n[no] &gt;&gt;&gt; \n\n\nResponda yes\nA continuación el instalador solicitará el lugar donde instalará Mambaforge. Puede confirmar la ubicación por defecto (en su directorio home: ~/mambaforge) presionando &lt;ENTER&gt;:\n\n\nMambaforge will now be installed into this location:\n/home/hector/mambaforge\n\n  - Press ENTER to confirm the location\n  - Press CTRL-C to abort the installation\n  - Or specify a different location below\n\n[/home/hector/mambaforge] &gt;&gt;&gt;\n\n\nUna vez el instalador finaliza la copia de archivos, le preguntará si desea inicializar Mabaforge:\n\n\n...\nTransaction finished\ninstallation finished.\nDo you wish the installer to initialize Mambaforge\nby running conda init? [yes|no]\n[no] &gt;&gt;&gt; \n\n\nResponda yes. Después, verá un mensaje que indica los cambios realizados en los archivos de configuración para inicializar Mambaforge:\n\n\n...\nno change     /home/hector/mambaforge/bin/conda\nno change     /home/hector/mambaforge/bin/conda-env\nno change     /home/hector/mambaforge/bin/activate\nno change     /home/hector/mambaforge/bin/deactivate\nno change     /home/hector/mambaforge/etc/profile.d/conda.sh\nno change     /home/hector/mambaforge/etc/fish/conf.d/conda.fish\nno change     /home/hector/mambaforge/shell/condabin/Conda.psm1\nno change     /home/hector/mambaforge/shell/condabin/conda-hook.ps1\nno change     /home/hector/mambaforge/lib/python3.10/site-packages/xontrib/conda.xsh\nno change     /home/hector/mambaforge/etc/profile.d/conda.csh\nmodified      /home/hector/.bashrc\n\n==&gt; For changes to take effect, close and re-open your current shell. &lt;==\n\nAdded mamba to /home/hector/.bashrc\n\n==&gt; For changes to take effect, close and re-open your current shell. &lt;==\n\n\nPara que la instalación tome efecto, cierre y abra nuevamente la terminal.\nSeguramente cuando abra nuevamente la terminal, notará que el prompt luce diferente; algo parecido a esto:\n(base) hector@Ubuntu:~$\nEsto es debido a que Conda usa el prompt como medio para informar el ambiente se encuentra activo (en uso) actualmente, mostrándolo entre paréntesis al inicio del prompt. En el ejemplo anterior aparece la palabra base; este es el nombre del ambiente “base” por defecto de Conda.\n\n\n1.2.2 Creación del ambiente Conda\nEl siguiente paso es crear un ambiente Conda en donde se instalarán todas los programas requeridos. Un ambiente es un directorio que contiene una colección especifica de paquetes (programas) de Conda (con una versión específica) que se han instalado.\nPara crear el ambiente, ejecute las siguientes órdenes:\n\nmamba create -n ensam\n\n\n\n...\nLooking for: []\n\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n\nTo activate this environment, use\n\n     $ mamba activate ensam\n\nTo deactivate an active environment, use\n\n     $ mamba deactivate\n\n\nComo pudo ver, mamba despliega un mensaje de confirmación de creación del ambiente.\n\n\n\n\n\n\nImportante\n\n\n\nPara poder usar el ambiente creado, siempre se debe activarlo primero:\n\nmamba activate &lt;ambiente&gt;\n\ndonde &lt;ambiente&gt; es el nombre del ambiente creado.\nCuando ya no se necesita el ambiente, se debe desactivar:\n\nmamba deactivate\n\n\n\n\n\n1.2.3 Instalación de paquetes\nAhora instalaremos los paquetes requeridos. Primero active el ambiente:\n\nmamba activate ensam\n\n\n\n\n\n\n\nNota\n\n\n\nCuando se activa correctamente, podrá ver el nombre del ambiente recién activado en el prompt, en este caso ensam en lugar de base:\n(ensam) hector@Ubuntu:~$\n\n\nAhora instale los paquetes ejecutando el siguiente comando:\n\nmamba install -c bioconda csvtk fastp fastqc java-jdk multiqc ncbi-datasets-cli \\\n  pigz prokka quast spades sra-tools wget\n\nA continuación verá algunos mensajes y barras de progreso mientras mamba descarga los listados de paquetes y busca los paquetes que se ordenaron instalar. Al final mamba solicitará que confirme la instalación de los paquetes:\n\n\n...\n  Summary:\n\n  Install: 290 packages\n\n  Total download: 1GB\n\n────────────────────────────────────────────────────────\n\n\nConfirm changes: [Y/n]\n\n\nConfirme escribiendo Y y después presione &lt;ENTER&gt;. De nuevo verá una serie de tareas completadas y barras de progreso mientras la instalación transcurre.\nAunque se ordenó instalar 11 paquetes, cada uno de ellos requiere múltiples dependencias, es decir, paquetes adicionales para funcionar. Aquí es donde se facilitan las cosas: mamba (o conda) se encarga de revisar las dependencias de cada paquete, instalarlas y configurarlas automáticamente para que cada programa funcione adecuadamente.\nAl finalizar la instalación verá un mensaje parecido a este:\n\n\n...\nDownloading and Extracting Packages\n\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: \\ The default QUAST package does not include:\n* GRIDSS (needed for structural variants detection)\n* SILVA 16S rRNA database (needed for reference genome detection in metagenomic datasets)\n* BUSCO tools and databases (needed for searching BUSCO genes) -- works in Linux only!\n\nTo be able to use those, please run\n    quast-download-gridss\n    quast-download-silva\n    quast-download-busco\n\ndone\n\n\nAhora todo el software requerido para el análisis de los datos está instalado."
  },
  {
    "objectID": "setup.html#footnotes",
    "href": "setup.html#footnotes",
    "title": "1  Preparación del entorno de trabajo",
    "section": "",
    "text": "Documentación de Conda (en inglés): https://docs.conda.io/en/latest/↩︎\nConda-forge: https://conda-forge.org/↩︎\nMiniforge en GitHub: https://github.com/conda-forge/miniforge.↩︎"
  },
  {
    "objectID": "data.html#software-requerido",
    "href": "data.html#software-requerido",
    "title": "2  Obtención de datos",
    "section": "2.1 Software requerido",
    "text": "2.1 Software requerido\n\n\n\nSoftware\nVersión\nDescripción\nRef.\n\n\n\n\nSRA Tools\n3.0.3\nColección de herramientas para descargar datos desde la base de datos SRA1 (del inglés Sequence Read Archive; Katz et al. (2022)) del NCBI (del inglés National Center for Biotechnology Information)\nRepositorio GitHub"
  },
  {
    "objectID": "data.html#datos",
    "href": "data.html#datos",
    "title": "2  Obtención de datos",
    "section": "2.2 Datos",
    "text": "2.2 Datos\nDescargaremos cuatro muestras de secuenciación de genoma completo o WGS (del inglés Whole Genome Sequencing) del organismo Helicobacter pylori, para ser ensambladas. Para descargar estas muestras necesitaremos los identificadores (número de acceso o accession number en inglés) en la base de datos SRA:\n\nSRR22388518\nSRR22388519\nSRR18335437\nSRR18335438"
  },
  {
    "objectID": "data.html#descarga",
    "href": "data.html#descarga",
    "title": "2  Obtención de datos",
    "section": "2.3 Descarga",
    "text": "2.3 Descarga\n\n\n\n\n\n\nImportante\n\n\n\nRecuerde siempre activar el ambiente ensam (si no está activado ya) antes de ejecutar los comandos de esta guía:\n\nmamba activate ensam\n\n\n\nPara empezar a descargar las muestras, abra una terminal y ejecute las órdenes que se dan a continuación.\n\n\n\n\n\n\nAdvertencia\n\n\n\nSiempre que vea comentarios (líneas empezando con #) en las cajas de comandos, no los digite en la terminal. Estos comentarios solo proveen información adicional a cerca de cada comando.\n\n\n\n\n\n\n\n\nNota\n\n\n\n\nLa descarga de cada muestra toma aproximadamente cinco minutos (o más), dependiendo de la velocidad de su conexión a Internet. No se preocupe si no ve ningún avance aparente después de ejecutar el comando de descarga (fasterq-dump).\nSi quiere ver el progreso de cada descarga, use la opción -p (o --progress) con fasterq-dump\nPuede ver otras opciones útiles de fasterq-dump consultando la ayuda: fasterq-dump --help\n\n\n\n\n# Entrar al directorio para datos en el directorio del proyecto\ncd $HOME/proyectos/ensamblaje/datos\n\n# Descargar las muestras\nfasterq-dump -S SRR22388518\n\n\n\nspots read      : 870,940\nreads read      : 1,741,880\nreads written   : 1,741,880\n\n\nFinalizada la descarga fasterq-dump imprime en pantalla el resumen de las secuencias descargadas y escritas en archivos (salida anterior) .\nAhora verifique los archivos descargados:\n\nls -lh\n\n\n\ntotal 962M\n-rw-rw-r-- 1 hector hector 481M mar  2 14:40 SRR22388518_1.fastq\n-rw-rw-r-- 1 hector hector 481M mar  2 14:40 SRR22388518_2.fastq\n\n\n\nComo puede observar, hay dos archivos descargados con la extensión .fastq. Veamos la estructura de nombre de los archivos descargados:\n   SRR22388518       _            1                .         fastq\n       |                          |                            |\n(accession number)      (conjunto de secuencias)      (extensión de archivo)\n\n\n\n\n\n\nImportante\n\n\n\nHay dos archivos puesto que la muestra se secuenció con tecnología Illumina paired-end, en la cual resultan dos reads (secuencias), forward (_1) y reverse (_2), de secuenciar los extremos de una molécula de ADN. En la Figura 2.1 se detalla la ubicación relativa de los dos reads respecto del fragmento de ADN secuenciado. En el archivo _1 están guardas todas las secuencias forward y en el archivo _2, todas las secuencias reverse.\n\n\n\n\n\nFigura 2.1. Representación esquemática de la secuenciación *paired-end*.\n\n\nEl formato FASTQ2 (Cock et al. 2010) es el estándar de facto para datos de secuenciación de segunda generación y es usado, entre otras, por la tecnología Illumina. Este formato almacena tanto las secuencias de ADN como la calidad de cada base secuenciada.\nAhora descarguemos el resto de las muestras:\n\nfasterq-dump -S SRR22388519\n\nfasterq-dump -S SRR18335437\n\nfasterq-dump -S SRR18335438\n\nAhora, aunque no es necesario, es una buena práctica comprimir las archivos descargados para que ocupen menos espacio en disco:\n\ngzip *.fastq\n\nComo verá, ahora los archivos están comprimidos por lo que tienen la extensión .gz (.fastq.gz):\n\nls\n\n\n\nSRR18335437_1.fastq.gz  SRR18335438_2.fastq.gz  SRR22388519_1.fastq.gz\nSRR18335437_2.fastq.gz  SRR22388518_1.fastq.gz  SRR22388519_2.fastq.gz\nSRR18335438_1.fastq.gz  SRR22388518_2.fastq.gz\n\n\nFinalmente, regresemos al directorio de proyectos:\n\ncd $HOME/proyectos\n\n\n\n\n\nCock, Peter J. A., Christopher J. Fields, Naohisa Goto, Michael L. Heuer, y Peter M. Rice. 2010. «The Sanger FASTQ file format for sequences with quality scores, and the Solexa/Illumina FASTQ variants». Nucleic Acids Research 38 (6): 1767-71. https://doi.org/10.1093/nar/gkp1137.\n\n\nKatz, Kenneth, Oleg Shutov, Richard Lapoint, Michael Kimelman, J Rodney Brister, y Christopher O’Sullivan. 2022. «The Sequence Read Archive: a decade more of explosive growth». Nucleic Acids Research 50 (D1): D387-90. https://doi.org/10.1093/nar/gkab1053."
  },
  {
    "objectID": "data.html#footnotes",
    "href": "data.html#footnotes",
    "title": "2  Obtención de datos",
    "section": "",
    "text": "Sequence Read Archive↩︎\nWikipedia: FASTQ Format↩︎"
  },
  {
    "objectID": "data_qual.html#software-requerido",
    "href": "data_qual.html#software-requerido",
    "title": "3  Control de calidad y limpieza de datos",
    "section": "3.1 Software requerido",
    "text": "3.1 Software requerido\n\n\n\nSoftware\nVersión\nDescripción\nRef.\n\n\n\n\nFastQC\n0.12.1\nHerramienta para el control de calidad en datos de secuenciación de alto rendimiento\nSitio Web\n\n\nMultiQC\n1.14\nHerramienta para unificar y resumir múltiples reportes generados por FastQC y muchos otros programas de bioinformática.\nEwels et al. (2016); sitio Web\n\n\nfastp\n0.23.2\nHerramienta para el pre-procesamiento rápido de archivos Fastq.\nChen et al. (2018); repositorio GitHub"
  },
  {
    "objectID": "data_qual.html#determinación-de-calidad",
    "href": "data_qual.html#determinación-de-calidad",
    "title": "3  Control de calidad y limpieza de datos",
    "section": "3.2 Determinación de calidad",
    "text": "3.2 Determinación de calidad\nPara revisar la calidad de los datos descargados, usaremos fastqc:\n\n# Entrar al directorio de datos en la carpeta del proyecto ensamblaje\ncd $HOME/proyectos/ensamblaje/datos\n# Analizar todos los archivos descargados\nfastqc -o qc/fastqc *.fastq.gz\n\nA continuación verá mensajes de progreso de fastqc:\n\n\nStarted analysis of SRR18335437_1.fastq.gz\nApprox 5% complete for SRR18335437_1.fastq.gz\nApprox 10% complete for SRR18335437_1.fastq.gz\nApprox 15% complete for SRR18335437_1.fastq.gz\nApprox 20% complete for SRR18335437_1.fastq.gz\nApprox 25% complete for SRR18335437_1.fastq.gz\nApprox 30% complete for SRR18335437_1.fastq.gz\nApprox 35% complete for SRR18335437_1.fastq.gz\nApprox 40% complete for SRR18335437_1.fastq.gz\nApprox 45% complete for SRR18335437_1.fastq.gz\nApprox 50% complete for SRR18335437_1.fastq.gz\nApprox 55% complete for SRR18335437_1.fastq.gz\nApprox 60% complete for SRR18335437_1.fastq.gz\nApprox 65% complete for SRR18335437_1.fastq.gz\nApprox 70% complete for SRR18335437_1.fastq.gz\nApprox 75% complete for SRR18335437_1.fastq.gz\nApprox 80% complete for SRR18335437_1.fastq.gz\nApprox 85% complete for SRR18335437_1.fastq.gz\nApprox 90% complete for SRR18335437_1.fastq.gz\nApprox 95% complete for SRR18335437_1.fastq.gz\nAnalysis complete for SRR18335437_1.fastq.gz\n...\n\n\nAl final, por cada archivo .fastq analizado, fastqc genera un archivo .html con el reporte de calidad y un archivo comprimido (.zip):\n\nls qc/fastqc\n\n\n\nSRR18335437_1_fastqc.html  SRR18335438_2_fastqc.html  SRR22388519_1_fastqc.html\nSRR18335437_1_fastqc.zip   SRR18335438_2_fastqc.zip   SRR22388519_1_fastqc.zip\nSRR18335437_2_fastqc.html  SRR22388518_1_fastqc.html  SRR22388519_2_fastqc.html\nSRR18335437_2_fastqc.zip   SRR22388518_1_fastqc.zip   SRR22388519_2_fastqc.zip\nSRR18335438_1_fastqc.html  SRR22388518_2_fastqc.html\nSRR18335438_1_fastqc.zip   SRR22388518_2_fastqc.zip\n\n\n\n\n\n\n\n\nNota\n\n\n\nEl archivo comprimido .zip contiene una copia del reporte .html, gráficos, y archivos de estadísticas.\n\n\n\n3.2.1 Reporte de calidad FastQC\nAnalicemos uno de los reportes de calidad de FastQC. Abra el archivo SRR18335437_1_fastqc.html. El reporte contiene diferentes secciones, llamadas módulos, que corresponden a diferentes evaluaciones de calidad que la herramienta hace sobre los datos (Figura 3.1). Puede consultar información detallada (en inglés) a cerca de FastQC y sus módulos en el Apéndice A. Por cada módulo, el reporte presenta un ícono con tres posibles estados de acuerdo al resultado de la evaluación (Tabla 3.1).\n\n\nTabla 3.1. Posibles resultados de la evaluación de calidad realizada por la herramienta FastQC\n\n\n\n\n\n\nSímbolo\nDescripción\n\n\n\n\n\nPasó. La muestra pasó la evaluación de calidad en esta categoría (módulo). No hay problemas de calidad.\n\n\n\nAdvertencia. La muestra tiene un posible problema calidad. El usuario debería revisar la muestra y tomar las medidas necesarias para evitar el error de ser posible. Por la naturaleza de la secuenciación de ADN, es normal que se presenten advertencias en algunos módulos en las muestras sin que signifique que haya un problema real o grave.\n\n\n\nFalló. La muestra falló la evaluación de calidad en este módulo. El usuario debería limpiar los datos para corregir el error.\n\n\n\n\nDe acuerdo con los estados, vemos que las muestras fallaron las evaluaciones de calidad de los módulos “Per base sequence quality” y “Sequence Duplication Levels”, y el módulo “Sequence Length Distribution” tiene una advertencia (Figura 3.1).\n\n\n\nFigura 3.1. Captura de pantalla de un reporte de calidad generado con la aplicación FastQC.\n\n\nTal vez el módulo más importante a revisar es “Per base sequence quality” (Sección A.3.5), el cual muestra el valor de calidad de por cada posición a lo largo de las secuencias del archivo procesado. Típicamente en archivos producidos con tecnología Illumina, la calidad es baja en las primeras siete a 10 bases de las secuencias, incrementando hasta alcanzar su máximo hacia la parte media de la secuencia. Luego la calidad empieza a decrecer hasta encontrar sus mínimos valores al final de la secuencia. Comúnmente la calidad mínima para lograr ensamblajes decentes es \\(Q \\ge 20\\) (eje Y en el gráfico). Así, este gráfico el crucial para que el usuario decida el número de bases (eje X) que se recortarán en los extremos de las secuencias (inicio 5’; final 3’), los cuales típicamente contienen las secciones con menor calidad.\n\n\n3.2.2 Unificando los reportes de calidad\nDado que los reportes de FastQC son independientes por cada archivo de lecturas (_1 y _2) y cada muestra, es difícil tener una visión general de la calidad de todos los datos en conjunto. Conviene entonces unificar los datos de calidad en un solo reporte para lograr una mejor interpretación de la información.\nEsta unificación se logra con la aplicación MultiQC. Ejecute la siguiente orden:\n\nmultiqc --filename multiqc_report.html --outdir qc qc/fastqc\n\n\n\n  /// MultiQC 🔍 | v1.14\n\n|           multiqc | Search path : /home/hector/proyectos/ensamblaje/datos/qc/fastqc\n|         searching | ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 16/16  \n|            fastqc | Found 8 reports\n|           multiqc | Compressing plot data\n|           multiqc | Report      : qc/multiqc_report.html\n|           multiqc | Data        : qc/multiqc_report_data\n|           multiqc | MultiQC complete\n\n\nAhora MultiQC ha generado dos elementos, el archivo multiqc_report.html y un directorio multiqc_report_data que contiene archivos de estadísticas. Al abrir el reporte .html se puede ver la información de calidad de todos los archivos analizados con FastqQC (Figura 3.2).\n\n\n\nFigura 3.2. Captura de pantalla del reporte de calidad unificado generado con MultiQC.\n\n\n\n\n\n\n\n\nTip\n\n\n\nAbra el reporte ensamblaje/datos/qc/multiqc_report.html para revisar toda la información de calidad evaluada por FastQC.\n\n\nRevisando la sección “General Statistics” del reporte MultiQC, podemos observar que los tamaños de secuencia varían según la muestra. La longitud (mediana) de secuencias de las muestras SRR18335437 y SRR18335438 es de 150 bp, mientras que la de las muestras SRR22388518 y SRR22388518 es de 251 bp.\nEchemos un vistazo ahora al gráfico de calidad de secuenciación en la sección “Sequence Quality Histograms” (Figura 3.3). Además de la diferencia de longitud de secuencias, se puede notar que:\n\nLa calidad al inicio de las secuencias en todos los archivos es buena (\\(Q \\ge 30\\))\nLa calidad al final de las secuencias es aceptable (\\(Q \\ge 20\\)) en todos los archivos, con excepción de las secuencias reverse (_2) de las muestras SRR22388518 y SRR22388519.\n\nDe estas observaciones se puede concluir que la limpieza de los datos consistirá en recortar las últimas bases (aprox. 20) de los archivos SRR22388518_2.fastq.gz y SRR22388519_2.fastq.gz pues son las que presentan baja calidad. Además, como buena práctica, se eliminarán aquellas secuencias cuya calidad promedio sea \\(Q &lt; 20\\).\n\n\n\nFigura 3.3. Gráfico de calidad de secuenciación por base"
  },
  {
    "objectID": "data_qual.html#limpieza",
    "href": "data_qual.html#limpieza",
    "title": "3  Control de calidad y limpieza de datos",
    "section": "3.3 Limpieza",
    "text": "3.3 Limpieza\nUsaremos la aplicación fastp para recortar y filtrar las secuencias por calidad. Empecemos procesando la primera muestra:\n\n# Entrar al directorio raíz del proyecto (en mi caso, /home/hector/ensamblaje)\ncd ..\n\n# Comando para ejecutar la limpieza de la primera muestra\nfastp --verbose \\\n      --thread 4 \\\n      --detect_adapter_for_pe \\\n      --cut_tail \\\n      --cut_mean_quality 20 \\\n      --average_qual 20 \\\n      --report_title 'Reporte fastp: SRR22388518' \\\n      --in1 datos/SRR22388518_1.fastq.gz \\\n      --in2 datos/SRR22388518_2.fastq.gz \\\n      --out1 resultados/00_datos_limpios/SRR22388518_1.clean.fastq.gz \\\n      --out2 resultados/00_datos_limpios/SRR22388518_2.clean.fastq.gz \\\n      --unpaired1 resultados/00_datos_limpios/SRR22388518_1.unpaired.fastq.gz \\\n      --unpaired2 resultados/00_datos_limpios/SRR22388518_2.unpaired.fastq.gz \\\n      --html resultados/00_datos_limpios/qc/fastp/SRR22388518.report.fastp.html \\\n      --json resultados/00_datos_limpios/qc/fastp/SRR22388518.report.fastp.json\n\nAntes de revisar el resultado, veamos las opciones usadas con el comando y su finalidad:\n\n--verbose: provee información adicional durante el procesamiento de los archivos\n--thread 4: usa cuatro hilos de ejecución de manera paralela para acelerar el procesamiento de los archivos\n--detect_adapter_for_pe: detecta las secuencias de adaptadores de secuenciación y las elimina\n--cut_tail: corta la “cola” (tail) de las secuencias, la cual se dijo tiene las bases de más baja calidad\n--cut_mean_quality 20: la calidad media mínima aceptada para corte de secuencias. fastp usa una ventana de 4 bases desde el extremo de la secuencia para revisar calidad; si el promedio de estas cuatro bases está por debajo de 20, elimina este extremo.\n--average_qual 20: la calidad media mínima aceptada para mantener una secuencia. Si al calcular la calidad media de toda la secuencia está por debajo de 20, la secuencia es descartada.\n--report_title 'Reporte fastp: SRR22388518': el título del reporte\n--in1: el archivo de secuencias forward a ser procesado\n--in2: el archivo de secuencias reverse a ser procesado\n--out1: el archivo de salida con las secuencias forward que pasaron el control de calidad\n--out2: el archivo de salida con las secuencias reverse que pasaron el control de calidad\n--unpaired1: el archivo de salida con las secuencias forward no pareadas que pasaron el control de calidad (no tienen una secuencia par reverse)\n--unpaired2: el archivo de salida con las secuencias reverse no pareadas que pasaron el control de calidad (no tienen una secuencia par forward)\n--html: el archivo de reporte en formato html\n--json: el archivo de reporte en formato json (estadísticas)\n\n\n\n\n\n\n\nTip\n\n\n\nPara conocer todas las opciones disponibles de fastp consulte la ayuda ejecutando fastp --help.\n\n\nEn el anterior comando, en lugar de cortar un número determinado de bases al final de las secuencias, se usa la estrategia del programa fastp. Por cada secuencia del archivo, fastp revisa la calidad media de una pequeña porción de 4 bases, llamado ventana, empezando desde el extremo final. Si la calidad media está por debajo del mínimo definido (20 en este caso), fastp recorta esta ventana de la secuencia. Este proceso se repita hasta que no se encuentre una ventana que deba recortarse. Así, solo las secuencias con baja calidad al final son recortadas. Este mismo principio se puede aplicar para el inicio de las secuencias, cuando sea el caso.\nVeamos ahora el resultado de fastp. Al ejecutar el anterior comando veremos una salida parecida a esto:\n\n\nDetecting adapter sequence for read1...\n&gt;Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n\nDetecting adapter sequence for read2...\nNo adapter detected for read2\n\n[19:24:32] start to load data of read1 \n[19:24:32] start to load data of read2 \n[19:24:36] Read1: loading completed with 871 packs \n[19:24:36] Read2: loading completed with 871 packs \n[19:24:39] thread 4 data processing completed \n[19:24:39] thread 4 finished \n[19:24:39] thread 3 data processing completed \n[19:24:39] thread 3 finished \n[19:24:39] thread 2 data processing completed \n[19:24:39] thread 2 finished \n[19:24:39] thread 1 data processing completed \n[19:24:39] thread 1 finished \n[19:24:39] resultados/00_datos_limpios/SRR22388518_1.unpaired.fastq.gz writer finished \n[19:24:39] resultados/00_datos_limpios/SRR22388518_2.unpaired.fastq.gz writer finished \n[19:24:40] resultados/00_datos_limpios/SRR22388518_2.clean.fastq.gz writer finished \n[19:24:40] resultados/00_datos_limpios/SRR22388518_1.clean.fastq.gz writer finished \n[19:24:40] start to generate reports\n \nRead1 before filtering:\ntotal reads: 870940\ntotal bases: 218350507\nQ20 bases: 198719240(91.0093%)\nQ30 bases: 184185641(84.3532%)\n\nRead2 before filtering:\ntotal reads: 870940\ntotal bases: 218399177\nQ20 bases: 175386628(80.3055%)\nQ30 bases: 149084629(68.2624%)\n\nRead1 after filtering:\ntotal reads: 863093\ntotal bases: 209876970\nQ20 bases: 193175278(92.0422%)\nQ30 bases: 180122777(85.823%)\n\nRead2 after filtering:\ntotal reads: 863093\ntotal bases: 201834951\nQ20 bases: 170111238(84.2823%)\nQ30 bases: 146895463(72.78%)\n\nFiltering result:\nreads passed filter: 1726186\nreads failed due to low quality: 12556\nreads failed due to too many N: 488\nreads failed due to too short: 2650\nreads with adapter trimmed: 150684\nbases trimmed due to adapters: 7399476\n\nDuplication rate: 0.0137782%\n\nInsert size peak (evaluated by paired-end reads): 251\n\nJSON report: resultados/00_datos_limpios/qc/fastp/report.fastp.json\nHTML report: resultados/00_datos_limpios/qc/fastp/report.fastp.html\n\nfastp --verbose --thread 4 --detect_adapter_for_pe --cut_tail --cut_mean_quality 20 --average_qual 20 --report_title Reporte fastp: SRR22388518 --in1 datos/SRR22388518_1.fastq.gz --in2 datos/SRR22388518_2.fastq.gz --out1 resultados/00_datos_limpios/SRR22388518_1.clean.fastq.gz --out2 resultados/00_datos_limpios/SRR22388518_2.clean.fastq.gz --unpaired1 resultados/00_datos_limpios/SRR22388518_1.unpaired.fastq.gz --unpaired2 resultados/00_datos_limpios/SRR22388518_2.unpaired.fastq.gz --html resultados/00_datos_limpios/qc/fastp/SRR22388518.report.fastp.html --json resultados/00_datos_limpios/qc/fastp/SRR22388518.report.fastp.json \nfastp v0.23.2, time used: 22 seconds\n\n\nPodemos encontrar información importante en los mensajes de la salida, como por ejemplo el número de secuencias y calidad antes y después de aplicar la limpieza o filtrado (secciones Read1 before filtering:, Read2 before filtering:, Read1 after filtering: y Read2 after filtering:), y el resumen del número de reads que pasaron y no pasaron el filtro (sección Filtering result).\nJunto con los archivos de secuencias filtradas, fastp genera un archivo de reporte .html y un archivo de estadísticas.\nAhora se deben procesar el resto de los archivos:\n\nfastp --verbose \\\n      --thread 4 \\\n      --detect_adapter_for_pe \\\n      --cut_tail \\\n      --cut_mean_quality 20 \\\n      --average_qual 20 \\\n      --report_title 'Reporte fastp: SRR22388519' \\\n      --in1 datos/SRR22388519_1.fastq.gz \\\n      --in2 datos/SRR22388519_2.fastq.gz \\\n      --out1 resultados/00_datos_limpios/SRR22388519_1.clean.fastq.gz \\\n      --out2 resultados/00_datos_limpios/SRR22388519_2.clean.fastq.gz \\\n      --unpaired1 resultados/00_datos_limpios/SRR22388519_1.unpaired.fastq.gz \\\n      --unpaired2 resultados/00_datos_limpios/SRR22388519_2.unpaired.fastq.gz \\\n      --html resultados/00_datos_limpios/qc/fastp/SRR22388519.report.fastp.html \\\n      --json resultados/00_datos_limpios/qc/fastp/SRR22388519.report.fastp.json\n\nfastp --verbose \\\n      --thread 4 \\\n      --detect_adapter_for_pe \\\n      --cut_tail \\\n      --cut_mean_quality 20 \\\n      --average_qual 20 \\\n      --report_title 'Reporte fastp: SRR18335437' \\\n      --in1 datos/SRR18335437_1.fastq.gz \\\n      --in2 datos/SRR18335437_2.fastq.gz \\\n      --out1 resultados/00_datos_limpios/SRR18335437_1.clean.fastq.gz \\\n      --out2 resultados/00_datos_limpios/SRR18335437_2.clean.fastq.gz \\\n      --unpaired1 resultados/00_datos_limpios/SRR18335437_1.unpaired.fastq.gz \\\n      --unpaired2 resultados/00_datos_limpios/SRR18335437_2.unpaired.fastq.gz \\\n      --html resultados/00_datos_limpios/qc/fastp/SRR18335437.report.fastp.html \\\n      --json resultados/00_datos_limpios/qc/fastp/SRR18335437.report.fastp.json\n      \nfastp --verbose \\\n      --thread 4 \\\n      --detect_adapter_for_pe \\\n      --cut_tail \\\n      --cut_mean_quality 20 \\\n      --average_qual 20 \\\n      --report_title 'Reporte fastp: SRR18335438' \\\n      --in1 datos/SRR18335438_1.fastq.gz \\\n      --in2 datos/SRR18335438_2.fastq.gz \\\n      --out1 resultados/00_datos_limpios/SRR18335438_1.clean.fastq.gz \\\n      --out2 resultados/00_datos_limpios/SRR18335438_2.clean.fastq.gz \\\n      --unpaired1 resultados/00_datos_limpios/SRR18335438_1.unpaired.fastq.gz \\\n      --unpaired2 resultados/00_datos_limpios/SRR18335438_2.unpaired.fastq.gz \\\n      --html resultados/00_datos_limpios/qc/fastp/SRR18335438.report.fastp.html \\\n      --json resultados/00_datos_limpios/qc/fastp/SRR18335438.report.fastp.json"
  },
  {
    "objectID": "data_qual.html#verificación-de-calidad-después-de-la-limpieza",
    "href": "data_qual.html#verificación-de-calidad-después-de-la-limpieza",
    "title": "3  Control de calidad y limpieza de datos",
    "section": "3.4 Verificación de calidad después de la limpieza",
    "text": "3.4 Verificación de calidad después de la limpieza\nFinalmente podemos usar FastQC y MultiQC para revisar la calidad de las muestras después de la limpieza:\n\n# Generar reportes con FastQC\nfastqc -o resultados/00_datos_limpios/qc/fastqc resultados/00_datos_limpios/*.clean.fastq.gz\n\n# Generar reporte unificado con MultiQC\nmultiqc \\\n  --filename multiqc_report.html \\\n  --outdir resultados/00_datos_limpios/qc \\\n  resultados/00_datos_limpios/qc/fastp \\\n  resultados/00_datos_limpios/qc/fastqc\n\nNote que en el anterior comando de MultiQC se pasó no solo el directorio de reportes FastQC, sino también el directorio con los reportes de fastp. La aplicación se encarga de generar un solo documento .html con dos secciones, una para fastp y otra para FastQC.\n\n\n\n\n\n\nTip\n\n\n\nExplore el reporte resultados/00_datos_limpios/qc/multiqc_report.html para ver las diferentes estadísticas de calidad después de haber aplicado los filtros a las muestras.\n\n\nEchemos un vistazo al gráfico de calidad de secuenciación por base generado sobre los datos limpios (Figura 3.3). Podemos ver que las dos muestras que te tenían baja calidad hacia el final de las secuencias, ahora aparecen en color naranja, con una calidad \\(Q &gt; 20\\).\n\nFinalmente las muestras están listas para ser ensambladas.\n\n\n\n\nChen, Shifu, Yanqing Zhou, Yaru Chen, y Jia Gu. 2018. «fastp: an ultra-fast all-in-one FASTQ preprocessor». Bioinformatics 34 (17): i884-90. https://doi.org/10.1093/bioinformatics/bty560.\n\n\nEwels, Philip, Måns Magnusson, Sverker Lundin, y Max Käller. 2016. «MultiQC: summarize analysis results for multiple tools and samples in a single report». Bioinformatics 32 (19): 3047-48. https://doi.org/10.1093/bioinformatics/btw354."
  },
  {
    "objectID": "assembly.html#software-requerido",
    "href": "assembly.html#software-requerido",
    "title": "4  Ensamblaje",
    "section": "4.1 Software requerido",
    "text": "4.1 Software requerido\n\n\n\nSoftware\nVersión\nDescripción\nRef.\n\n\n\n\nSPAdes\n3.15.5\nConjunto de herramientas para ensamblaje de novo de genomas con múltiples flujos de trabajo de ensamblaje especializado.\nPrjibelski et al. (2020); Sitio Web; repositorio GitHub"
  },
  {
    "objectID": "assembly.html#ensamblaje-de-genomas",
    "href": "assembly.html#ensamblaje-de-genomas",
    "title": "4  Ensamblaje",
    "section": "4.2 Ensamblaje de genomas",
    "text": "4.2 Ensamblaje de genomas\nUsaremos el ensamblador de novo1 SPAdes (Prjibelski et al. 2020), el cual fue desarrollado inicialmente para ensamblar secuencias cortas Illumina obtenidas de aislamientos bacterianos y secuenciación de células individuales (single-cell sequencing), y que con el tiempo ha sido extendido para usar secuencias de otras tecnologías y ensamblar metagenomas, transcriptomas, y plásmidos.\nPara ensamblar la muestra ejecute la siguiente orden:\n\n# Entrar en el directorio raíz del proyecto \ncd ensamblaje\n# Ejecutar el ensamblaje\nspades.py \\\n  --isolate \\\n  -1 resultados/00_datos_limpios/SRR22388518_1.clean.fastq.gz \\\n  -2 resultados/00_datos_limpios/SRR22388518_2.clean.fastq.gz \\\n  -o resultados/01_ensamblaje/SRR22388518 \\\n  -t 4\n\nVeamos los parámetros usados en el comando anterior:\n\n--isolate: indica a SPAdes que el pipeline a ser ejecutado es el de ensamblaje de aislamientos bacterianos.\n-1: archivo con los reads forward\n-2: archivo con los reads reverse\n-o: directorio donde se almacenarán los archivos de salida\n-t: hilos (threads) de procesos en paralelo para incrementar la velocidad del ensamblaje\n\nEl tiempo de ensamblaje depende del tamaño de la muestra a ensamblar, es decir de número de reads en los archivos .fastq.gz de entrada, y del número de cores o procesadores del computador y los hilos asignados al comando (opción -t). En el caso anterior el proceso tomó 35 minutos para ensamblar un total de 1726.186 de reads (863093 \\(\\times\\) 2) usando 4 hilos en una máquina con ocho cores.\nAhora veamos la salida del comando:\n\n\nCommand line: /home/hector/mambaforge/envs/ensam/bin/spades.py  --isolate   -1  /home/hector/proyectos/ensamblaje/resultados/00_datos_limpios/SRR22388518_1.clean.fastq.gz  -2  /home/hector/proyectos/ensamblaje/resultados/00_datos_limpios/SRR22388518_2.clean.fastq.gz  -o  /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518  -t  4   \n\nSystem information:\n  SPAdes version: 3.15.5\n  Python version: 3.10.6\n  OS: Linux-5.15.0-67-generic-x86_64-with-glibc2.31\n\nOutput dir: /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\n\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: ['/home/hector/proyectos/ensamblaje/resultados/00_datos_limpios/SRR22388518_1.clean.fastq.gz']\n      right reads: ['/home/hector/proyectos/ensamblaje/resultados/00_datos_limpios/SRR22388518_2.clean.fastq.gz']\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: automatic selection based on read length\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\nOther parameters:\n  Dir for temp files: /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518/tmp\n  Threads: 4\n  Memory limit (in Gb): 7\n\n\n======= SPAdes pipeline started. Log can be found here: /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518/spades.log\n\n...\n\n===== Terminate finished. \n\n * Assembled contigs are in /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518/contigs.fasta\n * Assembled scaffolds are in /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518/scaffolds.paths\n * Assembly graph is in /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518/assembly_graph.fastg\n * Assembly graph in GFA format is in /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518/assembly_graph_with_scaffolds.gfa\n\n======= SPAdes pipeline finished.\n\nSPAdes log can be found here: /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518/spades.log\n\nThank you for using SPAdes!\n\n\nEn la salida anterior, se puede observar al principio el comando ejecutado, así como información del sistema y la ubicicaión de los datos de entrada y salida. spades.py indica el inicio del ensamblaje mediante el encabezado ======= SPAdes pipeline started. y presenta la ubicación del archivo log (Log can be found here: /home/hector/proyectos/ensamblaje/resultados/01_ensamblaje/SRR22388518/spades.log). Este archivo log es muy importante pues contiene toda la información del proceso del ensamblaje, incluido cualquier error que se haya presentado, lo que permite tomar acciones para corregirlo. spades.py también detalla el proceso de ensamblaje a través de una amplia serie de mensajes ubicados en lugar de los tres puntos ... en la salida anterior. Cuando el proceso de ensamblaje es exitoso, spades.py presenta la sección ===== Terminate finished. que contiene la ubicación de los archivos de salida. Finalmente, bajo la sección ======= SPAdes pipeline finished., el programa presenta de nuevo la ubicación del archivo log.\nExaminemos ahora el directorio de salida de SPAdes:\n\nls resultados/01_ensamblaje/SRR22388518\n\n\n\nassembly_graph_after_simplification.gfa\nassembly_graph.fastg\nassembly_graph_with_scaffolds.gfa\nbefore_rr.fasta\ncontigs.fasta\ncontigs.paths\ndataset.info\ninput_dataset.yaml\nK127\nK21\nK33\nK55\nK77\nK99\nmisc\nparams.txt\npipeline_state\nrun_spades.sh\nrun_spades.yaml\nscaffolds.fasta\nscaffolds.paths\nspades.log\ntmp\n\n\nEstos son los archivos de salida cuando el ensamblaje es exitoso:\n\ncontigs.fasta: las secuencias de los contigs2 (en español, llamado menos frecuentemente como cóntigo) en formato FASTA3\nscaffolds.fasta: las secuencias de scaffolds4 en formato FASTA\nassembly_graph.gfa: grafo de ensamblaje y los camios de los scaffolds en formato GFA 1.05\nassembly_graph.fastg: grafo del ensamblaje en formato FASTG\ncontigs.paths: caminos de los contigs en el grafo de ensamblaje\nscaffolds.paths: caminos de los scaffolds en el grafo de ensamblaje\nspades.log: archivo con todos los mensajes del proceso\n\nDado que SPAdes es un ensamblador de genomas basado en grafos de De Bruijn6 (Compeau, Pevzner, y Tesler 2011), algunos de los archivos de salida contienen información de los grafos usados durante el ensamblaje (con extensión .gfa y .fastg). Si desea visualizar los archivos de grafos puede usar la aplicación Bandage7 (Wick et al. 2015).\nLos archivos de salida más importantes son aquellos que contienen las secuencias del ensamblaje en sí, es decir los contigs y scaffolds en formato FASTA (.fasta). Los scaffolds son las secuencias más largas de ensamblaje, las cuales son creadas a partir de las secuencias de los contigs. Este es el archivo que se usará como resultado final del ensamblaje y por lo tanto anotado.\nVeamos las primeras 10 líneas del archivo scaffolds.fasta:\n\nhead resultados/01_ensamblaje/SRR22388518/scaffolds.fasta\n\n\n\n&gt;NODE_1_length_407393_cov_61.379170\nGCTCTGTTGAATGATTTATCCAAAAATCGTTTAGCAACTAGCAAGGTTGAACTAGGAATA\nCAACAAAAATCCTAAATTAAGAGAATTTTATAGCTTTTTATAGGATTTTATAGGTTTGTA\nGTAACGGTATTTTGGGCAAGAAATCAACCTGACCACTTACAACCTTTGCCGCATCAACAT\nGTTTTTGCATGACATCAATTACTCTAAATTCCACATTGCGCTAGGGGACACGCTTTTAGA\nTCCAAAACATGAAGACGATGAGCCTTTTGATGCGATCGTTTCCAACCCTCCTTATTCCAC\nTAAATGGGTGGGCGATAACAACCCTATTTTAATCAACGACGAGCGCTTTAGCCCGGCCGG\nTGTGCTAGCGCCCAAAAACGCCGCCGATCTCGCTTTCACCATGCACATGCTTTCTTATTT\nATCCAATAGCGGCACGGCTGCGATCGTGGAATTCCCCGGGGTGCTTTATAGGGGGAATGC\nTGAAGCAAAAATCAGAGAATATTTAGTCAAAGAAAATTTCATTGACTGCGTGATCGCTTT\n\n\nEn el identificador (nombre) del primer scaffold &gt;NODE_1_length_407393_cov_61.379170, se puede observar alguna información de la secuencia: 1 es el número del contig/scaffold, 407393 es la longitud de la secuencia en pares de bases (bp), y 61.379170 es el número de k-mers que cubren el scaffold.\nCon un simple comando podemos averiguar el número total de scaffolds en el ensamblaje:\n\ngrep -c '&gt;' resultados/01_ensamblaje/SRR22388518/scaffolds.fasta\n\n\n\n336\n\n\nAhora terminaremos de procesar el conjunto de datos ensambando el resto de las muestras:\n\nspades.py \\\n  --isolate \\\n  -1 resultados/00_datos_limpios/SRR22388519_1.clean.fastq.gz \\\n  -2 resultados/00_datos_limpios/SRR22388519_2.clean.fastq.gz \\\n  -o resultados/01_ensamblaje/SRR22388519 \\\n  -t 4\n\nspades.py \\\n  --isolate \\\n  -1 resultados/00_datos_limpios/SRR18335437_1.clean.fastq.gz \\\n  -2 resultados/00_datos_limpios/SRR18335437_2.clean.fastq.gz \\\n  -o resultados/01_ensamblaje/SRR18335437 \\\n  -t 4\n\nspades.py \\\n  --isolate \\\n  -1 resultados/00_datos_limpios/SRR18335438_1.clean.fastq.gz \\\n  -2 resultados/00_datos_limpios/SRR18335438_2.clean.fastq.gz \\\n  -o resultados/01_ensamblaje/SRR18335438 \\\n  -t 4\n\nPara que cada ensamblaje (scaffolds.fasta) tenga el nombre de la correspondiente muestra, crearemos enlaces simbólicos en el directorio resulltados/01_ensamblaje. Por ejemplo, dentro del directorio resultados/01_ensamblaje el archivo SRR22388518.fasta apuntará al archivo SRR22388519/scaffolds.fasta. Esto se hace para que los pasos siguientes de la guía (control de calidad y anotación) se ejecuten con mayor comodidad. Para crear los enlaces ejecute la siguientes órdenes:\n\nln -sr resultados/01_ensamblaje/SRR22388518/scaffolds.fasta \\\n  resultados/01_ensamblaje/SRR22388518.fasta\n  \nln -sr resultados/01_ensamblaje/SRR22388519/scaffolds.fasta \\\n  resultados/01_ensamblaje/SRR22388519.fasta\n  \nln -sr resultados/01_ensamblaje/SRR18335437/scaffolds.fasta \\\n  resultados/01_ensamblaje/SRR18335437.fasta\n  \nln -sr resultados/01_ensamblaje/SRR18335438/scaffolds.fasta \\\n  resultados/01_ensamblaje/SRR18335438.fasta\n\nVerifiquemos los enlaces creados:\n\nls -l resultados/01_ensamblaje\n\n\n\ntotal 16K\ndrwxrwxr-x  9 hector hector 4,0K mar 12 19:33 SRR18335437\nlrwxrwxrwx  1 hector hector   27 mar 12 18:54 SRR18335437.fasta -&gt; SRR18335437/scaffolds.fasta\ndrwxrwxr-x  9 hector hector 4,0K mar 12 19:57 SRR18335438\nlrwxrwxrwx  1 hector hector   27 mar 12 18:54 SRR18335438.fasta -&gt; SRR18335438/scaffolds.fasta\ndrwxrwxr-x 11 hector hector 4,0K mar 11 13:54 SRR22388518\nlrwxrwxrwx  1 hector hector   27 mar 12 18:54 SRR22388518.fasta -&gt; SRR22388518/scaffolds.fasta\ndrwxrwxr-x 11 hector hector 4,0K mar 12 13:43 SRR22388519\nlrwxrwxrwx  1 hector hector   27 mar 12 18:54 SRR22388519.fasta -&gt; SRR22388519/scaffolds.fasta\n\n\nFinalmente, con todos los ensamblajes listos, procederemos a analizar su calidad.\n\n\n\n\nCompeau, Phillip E. C., Pavel A. Pevzner, y Glenn Tesler. 2011. «Why are de Bruijn graphs useful for genome assembly?» Nature biotechnology 29 (11): 987-91. https://doi.org/10.1038/nbt.2023.\n\n\nPrjibelski, Andrey, Dmitry Antipov, Dmitry Meleshko, Alla Lapidus, y Anton Korobeynikov. 2020. «Using SPAdes De Novo Assembler». Current Protocols in Bioinformatics 70 (1): e102. https://doi.org/10.1002/cpbi.102.\n\n\nWick, Ryan R., Mark B. Schultz, Justin Zobel, y Kathryn E. Holt. 2015. «Bandage: interactive visualization of de novo genome assemblies». Bioinformatics 31 (20): 3350-52. https://doi.org/10.1093/bioinformatics/btv383."
  },
  {
    "objectID": "assembly.html#footnotes",
    "href": "assembly.html#footnotes",
    "title": "4  Ensamblaje",
    "section": "",
    "text": "Wikipedia - De novo assemblers: https://en.wikipedia.org/wiki/De_novo_sequence_assemblers↩︎\nWikipedia - Cóntigo: https://es.wikipedia.org/wiki/C%C3%B3ntigo↩︎\nWikipedia - Formato FASTA: https://es.wikipedia.org/wiki/Formato_FASTA↩︎\nWikipedia - Scaffolding (bioinformatics): https://en.wikipedia.org/wiki/Scaffolding_(bioinformatics)↩︎\nThe GFA Format Specification: https://gfa-spec.github.io/GFA-spec/GFA1.html↩︎\nWikipedia - Grafo de De Bruijn: https://es.wikipedia.org/wiki/Grafo_de_De_Bruijn↩︎\nBandage: http://rrwick.github.io/Bandage/↩︎"
  },
  {
    "objectID": "assembly_qual.html#software-requerido",
    "href": "assembly_qual.html#software-requerido",
    "title": "5  Control de calidad de ensamblajes",
    "section": "5.1 Software requerido",
    "text": "5.1 Software requerido\n\n\n\nSoftware\nVersión\nDescripción\nRef.\n\n\n\n\nQuast\n5.2.0\nHerramienta para evaluar la calidad de ensamblajes de genomas (pequeños) y metagenomas, mediante el cálculo de diferentes métricas.\nGurevich et al. (2013); Sitio Web; repositorio GitHub"
  },
  {
    "objectID": "assembly_qual.html#determinación-de-calidad",
    "href": "assembly_qual.html#determinación-de-calidad",
    "title": "5  Control de calidad de ensamblajes",
    "section": "5.2 Determinación de calidad",
    "text": "5.2 Determinación de calidad\nEL cálculo de las métricas se realiza usando el software Quast (del inglés QUality ASsessment Tool). Aunque esta herramienta funciona sin un genoma de referencia, la evaluación de calidad será mejor si se provee uno. Este genoma podrá ser el del organismo más cercano o, como en nuestro caso, el del propio organismo(H. pylori1). Como tenemos acceso a un genoma de referencia, lo usaremos.\n\n5.2.1 Descarga del genoma de referencia\nEl número de acceso (accession number) del genoma de referencia de H. pylori, es GCF_017821535.1. Este número es necesario para descargar el archivo del genoma con la herramienta datasets:\n\n# Entrar al directorio datos del proyecto\ncd $HOME/proyectos/ensamblaje/datos\n\n# Descargar el paquete de datos con el genoma\ndatasets download genome accession GCF_017821535.1 --filename GCF_017821535.1_dataset.zip\n\n\n\nCollecting 1  records [================================================] 100% 1/1\nDownloading: GCF_017821535.1_dataset.zip    473kB done\n\n\nDescargado el paquete de datos con el genoma, debemos descomprimirlo:\n\nunzip GCF_017821535.1_dataset.zip\n\n\n\nArchive:  GCF_017821535.1_dataset.zip\n  inflating: README.md               \n  inflating: ncbi_dataset/data/assembly_data_report.jsonl  \n  inflating: ncbi_dataset/data/GCF_017821535.1/GCF_017821535.1_ASM1782153v1_genomic.fna  \n  inflating: ncbi_dataset/data/dataset_catalog.json\n\n\nAl descomprimir el paquete se generaron dos elemento, el archivo README.md y el directorio ncbi_dataset. El archivo que necesitamos es ncbi_dataset/data/GCF_017821535.1/GCF_017821535.1_ASM1782153v1_genomic.fna, así que lo moveremos y renombraremos a la ubicación apropiada:\n\nmv ncbi_dataset/data/GCF_017821535.1/GCF_017821535.1_ASM1782153v1_genomic.fna \\\n  GCF_017821535.1.fasta\n\nAhora podemos eliminar los archivos que no usaremos:\n\nrm -fr README.md ncbi_dataset GCF_017821535.1_dataset.zip\n\n\n\n5.2.2 Ejecución de Quast\n\ncd $HOME/proyectos/ensamblaje\n\nquast -o resultados/02_ensamblaje_qc/SRR22388518 \\\n  -r datos/GCF_017821535.1.fasta \\\n  -t 4 \\\n  resultados/01_ensamblaje/SRR22388518.fasta\n\n\n\n/home/hector/mambaforge/envs/ensam/bin/quast -o resultados/02_ensamblaje_qc/SRR22388518 -r datos/GCF_017821535.1.fasta -t 4 resultados/01_ensamblaje/SRR22388518.fasta\n\nVersion: 5.2.0\n\nSystem information:\n  OS: Linux-5.15.0-67-generic-x86_64-with-glibc2.31 (linux_64)\n  Python version: 3.10.6\n  CPUs number: 8\n\nStarted: 2023-03-12 20:15:20\n\nLogging to /home/hector/proyectos/ensamblaje/resultados/02_ensamblaje_qc/SRR22388518/quast.log\n\n...\n\nRESULTS:\n  Text versions of total report are saved to /home/hector/proyectos/ensamblaje/resultados/02_ensamblaje_qc/SRR22388518/report.txt, report.tsv, and report.tex\n  Text versions of transposed total report are saved to /home/hector/proyectos/ensamblaje/resultados/02_ensamblaje_qc/SRR22388518/transposed_report.txt, transposed_report.tsv, and transposed_report.tex\n  HTML version (interactive tables and plots) is saved to /home/hector/proyectos/ensamblaje/resultados/02_ensamblaje_qc/SRR22388518/report.html\n  PDF version (tables and plots) is saved to /home/hector/proyectos/ensamblaje/resultados/02_ensamblaje_qc/SRR22388518/report.pdf\n  Icarus (contig browser) is saved to /home/hector/proyectos/ensamblaje/resultados/02_ensamblaje_qc/SRR22388518/icarus.html\n  Log is saved to /home/hector/proyectos/ensamblaje/resultados/02_ensamblaje_qc/SRR22388518/quast.log\n\nFinished: 2023-03-12 20:15:24\nElapsed time: 0:00:04.507330\nNOTICEs: 3; WARNINGs: 0; non-fatal ERRORs: 0\n\nThank you for using QUAST!\n\n\nQuast genera un reporte en diferentes formatos: texto (.txt y .tsv), LaTeX (.tex), html (.html) y pdf (.pdf).\n\n\n\n\nGurevich, Alexey, Vladislav Saveliev, Nikolay Vyahhi, y Glenn Tesler. 2013. «QUAST: quality assessment tool for genome assemblies». Bioinformatics 29 (8): 1072-75. https://doi.org/10.1093/bioinformatics/btt086."
  },
  {
    "objectID": "assembly_qual.html#footnotes",
    "href": "assembly_qual.html#footnotes",
    "title": "5  Control de calidad de ensamblajes",
    "section": "",
    "text": "NCBI Datasets Genome page of Helicobacter pylori: https://www.ncbi.nlm.nih.gov/labs/data-hub/genome/GCF_017821535.1/↩︎"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Bibliografía",
    "section": "",
    "text": "Chen, Shifu, Yanqing Zhou, Yaru Chen, and Jia Gu. 2018. “Fastp: An\nUltra-Fast All-in-One FASTQ Preprocessor.”\nBioinformatics 34 (17): i884–90. https://doi.org/10.1093/bioinformatics/bty560.\n\n\nCock, Peter J. A., Christopher J. Fields, Naohisa Goto, Michael L.\nHeuer, and Peter M. Rice. 2010. “The Sanger FASTQ File Format for\nSequences with Quality Scores, and the Solexa/Illumina FASTQ\nVariants.” Nucleic Acids Research 38 (6): 1767–71. https://doi.org/10.1093/nar/gkp1137.\n\n\nCompeau, Phillip E. C., Pavel A. Pevzner, and Glenn Tesler. 2011.\n“Why Are de Bruijn Graphs Useful for Genome Assembly?”\nNature Biotechnology 29 (11): 987–91. https://doi.org/10.1038/nbt.2023.\n\n\nEwels, Philip, Måns Magnusson, Sverker Lundin, and Max Käller. 2016.\n“MultiQC: Summarize Analysis Results for Multiple Tools and\nSamples in a Single Report.” Bioinformatics 32 (19):\n3047–48. https://doi.org/10.1093/bioinformatics/btw354.\n\n\nGurevich, Alexey, Vladislav Saveliev, Nikolay Vyahhi, and Glenn Tesler.\n2013. “QUAST: Quality Assessment Tool for Genome\nAssemblies.” Bioinformatics 29 (8): 1072–75. https://doi.org/10.1093/bioinformatics/btt086.\n\n\nKatz, Kenneth, Oleg Shutov, Richard Lapoint, Michael Kimelman, J Rodney\nBrister, and Christopher O’Sullivan. 2022. “The Sequence Read\nArchive: A Decade More of Explosive Growth.” Nucleic Acids\nResearch 50 (D1): D387–90. https://doi.org/10.1093/nar/gkab1053.\n\n\nPrjibelski, Andrey, Dmitry Antipov, Dmitry Meleshko, Alla Lapidus, and\nAnton Korobeynikov. 2020. “Using SPAdes De Novo Assembler.”\nCurrent Protocols in Bioinformatics 70 (1): e102. https://doi.org/10.1002/cpbi.102.\n\n\nWick, Ryan R., Mark B. Schultz, Justin Zobel, and Kathryn E. Holt. 2015.\n“Bandage: Interactive Visualization of de Novo Genome\nAssemblies.” Bioinformatics 31 (20): 3350–52. https://doi.org/10.1093/bioinformatics/btv383."
  },
  {
    "objectID": "a-fastqc.html#introduction",
    "href": "a-fastqc.html#introduction",
    "title": "Apéndice A — FastQC help",
    "section": "A.1 Introduction",
    "text": "A.1 Introduction\n\nA.1.1 What is FastQC\nModern high throughput sequencers can generate hundreds of millions of sequences in a single run. Before analysing this sequence to draw biological conclusions you should always perform some simple quality control checks to ensure that the raw data looks good and there are no problems or biases in your data which may affect how you can usefully use it.\nMost sequencers will generate a QC report as part of their analysis pipeline, but this is usually only focused on identifying problems which were generated by the sequencer itself. FastQC aims to provide a QC report which can spot problems which originate either in the sequencer or in the starting library material.\nFastQC can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files."
  },
  {
    "objectID": "a-fastqc.html#basic-operations",
    "href": "a-fastqc.html#basic-operations",
    "title": "Apéndice A — FastQC help",
    "section": "A.2 Basic Operations",
    "text": "A.2 Basic Operations\n\nA.2.1 Opening a Sequence file\nTo open one or more Sequence files interactively simply run the program and select File &gt; Open. You can then select the files you want to analyse.\nNewly opened files will immediately appear in the set of tabs at the top of the screen. Because of the size of these files it can take a couple of minutes to open them. FastQC operates a queueing system where only one file is opened at a time, and new files will wait until existing files have been processed.\nFastQC supports files in the following formats\n\nFastQ (all quality encoding variants)\nCasava FastQ files1\nColorspace FastQ\nGZip compressed FastQ\nSAM\nBAM\nSAM/BAM Mapped only (normally used for colorspace data)\n\nBy default FastQC will try to guess the file format from the name of the input file. Anything ending in .sam or .bam will be opened as a SAM/BAM file (using all sequences, mapped and unmapped) , and everything else will be treated as FastQ format. If you want to override this detection and specify the file format manually then you can use the drop down file filter in the file chooser to select the type of file you’re going to load. You need to use the drop down selector to make the program use the Mapped BAM or Casava file modes as these won’t be selected automatically.\n\n\nA.2.2 Evaluating Results\nThe analysis in FastQC is performed by a series of analysis modules. The left hand side of the main interactive display or the top of the HTML report show a summary of the modules which were run, and a quick evaluation of whether the results of the module seem entirely normal (green tick), slightly abnormal (orange triangle) or very unusual (red cross).\nIt is important to stress that although the analysis results appear to give a pass/fail result, these evaluations must be taken in the context of what you expect from your library. A ‘normal’ sample as far as FastQC is concerned is random and diverse. Some experiments may be expected to produce libraries which are biased in particular ways. You should treat the summary evaluations therefore as pointers to where you should concentrate your attention and understand why your library may not look random and diverse.\nSpecific guidance on how to interpret the output of each module can be found in the modules section of the help.\n\n\nA.2.3 Saving a Report\nIn addition to providing an interactive report FastQC also has the option to create an HTML version of this report for a more permanent record. This HTML report can also be generated directly by running FastQC in non-interactive mode.\nTo create a report simply select File &gt; Save Report from the main menu. By default a report will be created using the name of the fastq file with _fastqc.html appended to the end. The report will be created for whichever file tab was active when the menu option was selected.\nThe HTML file which is saved is a self-contained document with all of the graphs embedded into it, so you can distribute this single file. Alongside the HTML file is a zip file (with the same name as the HTML file, but with .zip added to the end). This file contains the graphs from the report as separate files but also contains data files which are designed to be easily parsed to allow for a more detailed and automated evauation of the raw data on which the QC report is built."
  },
  {
    "objectID": "a-fastqc.html#analysis-modules",
    "href": "a-fastqc.html#analysis-modules",
    "title": "Apéndice A — FastQC help",
    "section": "A.3 Analysis Modules",
    "text": "A.3 Analysis Modules\n\nA.3.1 Basic Statistics\n\nA.3.1.1 Summary\nThe Basic Statistics module generates some simple composition statistics for the file analysed.\n\nFilename: The original filename of the file which was analysed\nFile type: Says whether the file appeared to contain actual base calls or colorspace data which had to be converted to base calls\nEncoding: Says which ASCII encoding of quality values was found in this file.\nTotal Sequences: A count of the total number of sequences processed. There are two values reported, actual and estimated. At the moment these will always be the same. In the future it may be possible to analyse just a subset of sequences and estimate the total number, to speed up the analysis, but since we have found that problematic sequences are not evenly distributed through a file we have disabled this for now.\nFiltered Sequences: If running in Casava mode sequences flagged to be filtered will be removed from all analyses. The number of such sequences removed will be reported here. The total sequences count above will not include these filtered sequences and will the number of sequences actually used for the rest of the analysis.\nSequence Length: Provides the length of the shortest and longest sequence in the set. If all sequences are the same length only one value is reported.\n%GC: The overall %GC of all bases in all sequences\n\n\n\nA.3.1.2 Warning\nBasic Statistics never raises a warning.\n\n\nA.3.1.3 Failure\nBasic Statistics never raises an error.\n\n\nA.3.1.4 Common reasons for warnings\nThis module never raises warnings or errors\n\n\n\nA.3.2 Adapter Content\n\nA.3.2.1 Summary\nThe Kmer Content module will do a generic analysis of all of the Kmers in your library to find those which do not have even coverage through the length of your reads. This can find a number of different sources of bias in the library which can include the presence of read-through adapter sequences building up on the end of your sequences.\nYou can however find that the presence of any overrepresented sequences in your library (such as adapter dimers) will cause the Kmer plot to be dominated by the Kmers these sequences contain, and that it’s not always easy to see if there are other biases present in which you might be interested.\nOne obvious class of sequences which you might want to analyse are adapter sequences. It is useful to know if your library contains a significant amount of adapter in order to be able to assess whether you need to adapter trim or not. Although the Kmer analysis can theoretically spot this kind of contamination it isn’t always clear. This module therefore does a specific search for a set of separately defined Kmers and will give you a view of the total proportion of your library which contain these Kmers. A results trace will always be generated for all of the sequences present in the adapter config file so you can see the adapter content of your library, even if it’s low.\nThe plot itself shows a cumulative percentage count of the proportion of your library which has seen each of the adapter sequences at each position. Once a sequence has been seen in a read it is counted as being present right through to the end of the read so the percentages you see will only increase as the read length goes on.\nIn addition to classic adapter sequences the default configuration also includes polyA and polyG as sequences to search for. PolyA can be useful to include when looking at RNA-Seq libraries. PolyG is present as a technical artefact in 2-colour illumina libraries where it is produced when the signal from the cluster disappears. Both of these sequences are generally trimmed from the 3’ end of sequences, and are therefore removed in a similar way to adapters, hence their inclusion in the default configuration. These sequences can be removed by editing the adapter_list.txt file in the Configuration directory.\n\n\nA.3.2.2 Warning\nThis module will issue a warning if any sequence is present in more than 5% of all reads.\n\n\nA.3.2.3 Failure\nThis module will issue a warning if any sequence is present in more than 10% of all reads.\n\n\nA.3.2.4 Common reasons for warnings\nAny library where a reasonable proportion of the insert sizes are shorter than the read length will trigger this module. This doesn’t indicate a problem as such - just that the sequences will need to be adapter trimmed before proceeding with any downstream analysis.\n\n\n\nA.3.3 Kmer Content\n\nA.3.3.1 Summary\nThe analysis of overrepresented sequences will spot an increase in any exactly duplicated sequences, but there are a different subset of problems where it will not work.\n\nIf you have very long sequences with poor sequence quality then random sequencing errors will dramatically reduce the counts for exactly duplicated sequences.\nIf you have a partial sequence which is appearing at a variety of places within your sequence then this won’t be seen either by the per base content plot or the duplicate sequence analysis.\n\nThe Kmer module starts from the assumption that any small fragment of sequence should not have a positional bias in its apearance within a diverse library. There may be biological reasons why certain Kmers are enriched or depleted overall, but these biases should affect all positions within a sequence equally. This module therefore measures the number of each 7-mer at each position in your library and then uses a binomial test to look for significant deviations from an even coverage at all positions. Any Kmers with positionally biased enrichment are reported. The top 6 most biased Kmer are additionally plotted to show their distribution.\n\n\n\nKmer profiles\n\n\nTo allow this module to run in a reasonable time only 2% of the whole library is analysed and the results are extrapolated to the rest of the library. Sequences longer than 500bp are truncated to 500bp for this analysis.\n\n\nA.3.3.2 Warning\nThis module will issue a warning if any k-mer is imbalanced with a binomial p-value &lt;0.01.\n\n\nA.3.3.3 Failure\nThis module will issue a warning if any k-mer is imbalanced with a binomial p-value &lt; 10^-5.\n\n\nA.3.3.4 Common reasons for warnings\nAny individually overrepresented sequences, even if not present at a high enough threshold to trigger the overrepresented sequences module will cause the Kmers from those sequences to be highly enriched in this module. These will normally appear as sharp spikes of enrichemnt at a single point in the sequence, rather than a progressive or broad enrichment.\nLibraries which derive from random priming will nearly always show Kmer bias at the start of the library due to an incomplete sampling of the possible random primers.\n\n\n\nA.3.4 Per Tile Sequence Quality\n\nA.3.4.1 Summary\nThis graph will only appear in your analysis results if you’re using an Illumina library which retains its original sequence identifiers. Encoded in these is the flowcell tile from which each read came. The graph allows you to look at the quality scores from each tile across all of your bases to see if there was a loss in quality associated with only one part of the flowcell.\nThe plot shows the deviation from the average quality for each tile. The colours are on a cold to hot scale, with cold colours being positions where the quality was at or above the average for that base in the run, and hotter colours indicate that a tile had worse qualities than other tiles for that base. In the example below you can see that certain tiles show consistently poor quality. A good plot should be blue all over.\n\n\n\nKmer profiles\n\n\nReasons for seeing warnings or errors on this plot could be transient problems such as bubbles going through the flowcell, or they could be more permanent problems such as smudges on the flowcell or debris inside the flowcell lane.\n\n\nA.3.4.2 Warning\nThis module will issue a warning if any tile shows a mean Phred score more than 2 less than the mean for that base across all tiles.\n\n\nA.3.4.3 Failure\nThis module will raise and error if any tile shows a mean Phred score more than 5 less than the mean for that base across all tiles.\n\n\nA.3.4.4 Common reasons for warnings\nWhilst warnings in this module can be triggered by individual specific events we have also observed that greater variation in the phred scores attributed to tiles can also appear when a flowcell is generally overloaded. In this case events appear all over the flowcell rather than being confined to a specific area or range of cycles. We would generally ignore errors which mildly affected a small number of tiles for only 1 or 2 cycles, but would pursue larger effects which showed high deviation in scores, or which persisted for several cycles.\n\n\n\nA.3.5 Per Base Sequence Quality\n\nA.3.5.1 Summary\nThis view shows an overview of the range of quality values across all bases at each position in the FastQ file.\n\nFor each position a BoxWhisker type plot is drawn. The elements of the plot are as follows:\n\nThe central red line is the median value\nThe yellow box represents the inter-quartile range (25-75%)\nThe upper and lower whiskers represent the 10% and 90% points\nThe blue line represents the mean quality\n\nThe y-axis on the graph shows the quality scores. The higher the score the better the base call. The background of the graph divides the y axis into very good quality calls (green), calls of reasonable quality (orange), and calls of poor quality (red). The quality of calls on most platforms will degrade as the run progresses, so it is common to see base calls falling into the orange area towards the end of a read.\nIt should be mentioned that there are number of different ways to encode a quality score in a FastQ file. FastQC attempts to automatically determine which encoding method was used, but in some very limited datasets it is possible that it will guess this incorrectly (ironically only when your data is universally very good!). The title of the graph will describe the encoding FastQC thinks your file used.\nResults from this module will not be displayed if your input is a BAM/SAM file in which quality scores have not been recorded.\n\n\nA.3.5.2 Warning\nA warning will be issued if the lower quartile for any base is less than 10, or if the median for any base is less than 25.\n\n\nA.3.5.3 Failure\nThis module will raise a failure if the lower quartile for any base is less than 5 or if the median for any base is less than 20.\n\n\nA.3.5.4 Common reasons for warnings\nThe most common reason for warnings and failures in this module is a general degradation of quality over the duration of long runs. In general sequencing chemistry degrades with increasing read length and for long runs you may find that the general quality of the run falls to a level where a warning or error is triggered.\nIf the quality of the library falls to a low level then the most common remedy is to perform quality trimming where reads are truncated based on their average quality. For most libraries where this type of degradation has occurred you will often be simultaneously running into the issue of adapter read-through so a combined adapter and quality trimming step is often employed.\nAnother possibility is that a warn / error is triggered because of a short loss of quality earlier in the run, which then recovers to produce later good quality sequence. This can happen if there is a transient problem with the run (bubbles passing through a flowcell for example). You can normally see this type of error by looking at the per-tile quality plot (if available for your platform). In these cases trimming is not advisable as it will remove later good sequence, but you might want to consider masking bases during subsequent mapping or assembly.\nIf your library has reads of varying length then you can find a warning or error is triggered from this module because of very low coverage for a given base range. Before committing to any action, check how many sequences were responsible for triggering an error by looking at the sequence length distribution module results.\n\n\n\nA.3.6 Per Sequence Quality Scores\n\nA.3.6.1 Summary\nThe per sequence quality score report allows you to see if a subset of your sequences have universally low quality values. It is often the case that a subset of sequences will have universally poor quality, often because they are poorly imaged (on the edge of the field of view etc), however these should represent only a small percentage of the total sequences.\n\nIf a significant proportion of the sequences in a run have overall low quality then this could indicate some kind of systematic problem - possibly with just part of the run (for example one end of a flowcell).\nResults from this module will not be displayed if your input is a BAM/SAM file in which quality scores have not been recorded.\n\n\nA.3.6.2 Warning\nA warning is raised if the most frequently observed mean quality is below 27 - this equates to a 0.2% error rate.\n\n\nA.3.6.3 Failure\nAn error is raised if the most frequently observed mean quality is below 20 - this equates to a 1% error rate.\n\n\nA.3.6.4 Common reasons for warnings\nThis module is generally fairly robust and errors here usually indicate a general loss of quality within a run. For long runs this may be alleviated through quality trimming. If a bi-modal, or complex distribution is seen then the results should be evaluated in concert with the per-tile qualities (if available) since this might indicate the reason for the loss in quality of a subset of sequences.\n\n\n\nA.3.7 Per Base Sequence Content\n\nA.3.7.1 Summary\nPer Base Sequence Content plots out the proportion of each base position in a file for which each of the four normal DNA bases has been called.\n\nIn a random library you would expect that there would be little to no difference between the different bases of a sequence run, so the lines in this plot should run parallel with each other. The relative amount of each base should reflect the overall amount of these bases in your genome, but in any case they should not be hugely imbalanced from each other.\nIt’s worth noting that some types of library will always produce biased sequence composition, normally at the start of the read. Libraries produced by priming using random hexamers (including nearly all RNA-Seq libraries) and those which were fragmented using transposases inherit an intrinsic bias in the positions at which reads start. This bias does not concern an absolute sequence, but instead provides enrichement of a number of different K-mers at the 5’ end of the reads. Whilst this is a true technical bias, it isn’t something which can be corrected by trimming and in most cases doesn’t seem to adversely affect the downstream analysis. It will however produce a warning or error in this module.\n\n\nA.3.7.2 Warning\nThis module issues a warning if the difference between A and T, or G and C is greater than 10% in any position.\n\n\nA.3.7.3 Failure\nThis module will fail if the difference between A and T, or G and C is greater than 20% in any position.\n\n\nA.3.7.4 Common reasons for warnings\nThere are a number of common scenarios which would ellicit a warning or error from this module.\nOverrepresented sequences: If there is any evidence of overrepresented sequences such as adapter dimers or rRNA in a sample then these sequences may bias the overall composition and their sequence will emerge from this plot.\nBiased fragmentation: Any library which is generated based on the ligation of random hexamers or through tagmentation should theoretically have good diversity through the sequence, but experience has shown that these libraries always have a selection bias in around the first 12bp of each run. This is due to a biased selection of random primers, but doesn’t represent any individually biased sequences. Nearly all RNA-Seq libraries will fail this module because of this bias, but this is not a problem which can be fixed by processing, and it doesn’t seem to adversely affect the ablity to measure expression.\nBiased composition libraries: Some libraries are inherently biased in their sequence composition. The most obvious example would be a library which has been treated with sodium bisulphite which will then have converted most of the cytosines to thymines, meaning that the base composition will be almost devoid of cytosines and will thus trigger an error, despite this being entirely normal for that type of library\nIf you are analysing a library which has been aggressivley adapter trimmed then you will naturally introduce a composition bias at the end of the reads as sequences which happen to match short stretches of adapter are removed, leaving only sequences which do not match. Sudden deviations in composition at the end of libraries which have undergone aggressive trimming are therefore likely to be spurious.\n\n\n\nA.3.8 Per Sequence GC Content\n\nA.3.8.1 Summary\nThis module measures the GC content across the whole length of each sequence in a file and compares it to a modelled normal distribution of GC content.\n\nIn a normal random library you would expect to see a roughly normal distribution of GC content where the central peak corresponds to the overall GC content of the underlying genome. Since we don’t know the the GC content of the genome the modal GC content is calculated from the observed data and used to build a reference distribution.\nAn unusually shaped distribution could indicate a contaminated library or some other kinds of biased subset. A normal distribution which is shifted indicates some systematic bias which is independent of base position. If there is a systematic bias which creates a shifted normal distribution then this won’t be flagged as an error by the module since it doesn’t know what your genome’s GC content should be.\n\n\nA.3.8.2 Warning\nA warning is raised if the sum of the deviations from the normal distribution represents more than 15% of the reads.\n\n\nA.3.8.3 Failure\nThis module will indicate a failure if the sum of the deviations from the normal distribution represents more than 30% of the reads.\n\n\nA.3.8.4 Common reasons for warnings\nWarnings in this module usually indicate a problem with the library. Sharp peaks on an otherwise smooth distribution are normally the result of a specific contaminant (adapter dimers for example), which may well be picked up by the overrepresented sequences module. Broader peaks may represent contamination with a different species.\n\n\n\nA.3.9 Per Base N Content\n\nA.3.9.1 Summary\nIf a sequencer is unable to make a base call with sufficient confidence then it will normally substitute an N rather than a conventional base] call\nThis module plots out the percentage of base calls at each position for which an N was called.\n\nIt’s not unusual to see a very low proportion of Ns appearing in a sequence, especially nearer the end of a sequence. However, if this proportion rises above a few percent it suggests that the analysis pipeline was unable to interpret the data well enough to make valid base calls.\n\n\nA.3.9.2 Warning\nThis module raises a warning if any position shows an N content of &gt;5%.\n\n\nA.3.9.3 Failure\nThis module will raise an error if any position shows an N content of &gt;20%.\n\n\nA.3.9.4 Common reasons for warnings\nThe most common reason for the inclusion of significant proportions of Ns is a general loss of quality, so the results of this module should be evaluated in concert with those of the various quality modules. You should check the coverage of a specific bin, since it’s possible that the last bin in this analysis could contain very few sequences, and an error could be prematurely triggered in this case.\nAnother common scenario is the incidence of a high proportions of N at a small number of positions early in the library, against a background of generally good quality. Such deviations can occur when you have very biased sequence composition in the library to the point that base callers can become confused and make poor calls. This type of problem will be apparent when looking at the per-base sequence content results.\n\n\n\nA.3.10 Sequence Length Distribution\n\nA.3.10.1 Summary\nSome high throughput sequencers generate sequence fragments of uniform length, but others can contain reads of wildly varying lengths. Even within uniform length libraries some pipelines will trim sequences to remove poor quality base calls from the end.\nThis module generates a graph showing the distribution of fragment sizes in the file which was analysed.\n\nIn many cases this will produce a simple graph showing a peak only at one size, but for variable length FastQ files this will show the relative amounts of each different size of sequence fragment.\n\n\nA.3.10.2 Warning\nThis module will raise a warning if all sequences are not the same length.\n\n\nA.3.10.3 Failure\nThis module will raise an error if any of the sequences have zero length.\n\n\nA.3.10.4 Common reasons for warnings\nFor some sequencing platforms it is entirely normal to have different read lengths so warnings here can be ignored.\n\n\n\nA.3.11 Duplicate Sequences\n\nA.3.11.1 Summary\nIn a diverse library most sequences will occur only once in the final set. A slightly elevated level of duplication may indicate a very high level of coverage of the target sequence, but a high level of duplication is more likely to indicate some kind of enrichment bias (eg PCR over amplification).\nThis module counts the degree of duplication for every sequence in a library and creates a plot showing the relative number of sequences with different degrees of duplication.\n\nTo cut down on the memory requirements for this module only sequences which first appear in the first 100,000 sequences in each file are analysed, and these are then tracked through the entire dataset. This should be enough to get a good impression for the duplication levels in the whole file. Each sequence is tracked to the end of the file to give a representative count of the overall duplication level. To cut down on the amount of information in the final plot any sequences with more than 10 duplicates are placed into grouped bins to give a clear impression of the overall duplication level without having to show each individual duplication value.\nBecause the duplication detection requires an exact sequence match over the whole length of the sequence, any reads over 50bp in length are truncated to 50bp for the purposes of this analysis. Even so, longer reads are more likely to contain sequencing errors which will artificially increase the observed diversity and will tend to underrepresent highly duplicated sequences.\nThe plot shows the proportion of the library which is made up of sequences in each of the different duplication level bins. The x axis is the degree of duplication, and the y axis shows the proportion of the library which is made up of reads with that level of duplication.\nIn a properly diverse library most sequences should fall into the far left of the plot . A general level of enrichment, indicating broad oversequencing in the library will tend to flatten the line, lowering the low end and generally raising other categories. More specific enrichments of subsets, or the presence of low complexity contaminants will tend to produce spikes towards the right of the plot.\nThe module also calculates an expected overall loss of sequence were the library to be deduplicated. This headline figure is shown at the top of the plot and gives a reasonable impression of the potential overall level of loss.\n\n\nA.3.11.2 Warning\nThis module will issue a warning if non-unique sequences make up more than 30% of the total.\n\n\nA.3.11.3 Failure\nThis module will issue a error if non-unique sequences make up more than 50% of the total.\n\n\nA.3.11.4 Common reasons for warnings\nThe underlying assumption of this module is of a diverse unenriched library. Any deviation from this assumption will naturally generate duplicates and can lead to warnings or errors from this module.\nIn general there are two potential types of duplicate in a library, technical duplicates arising from PCR artefacts, or biological duplicates which are natural collisions where different copies of exactly the same sequence are randomly selected. From a sequence level there is no way to distinguish between these two types and both will be reported as duplicates here.\nA warning or error in this module is simply a statement that you have exhausted the diversity in at least part of your library and are re-sequencing the same sequences. In a supposedly diverse library this would suggest that the diversity has been partially or completely exhausted and that you are therefore wasting sequencing capacity. However in some library types you will naturally tend to over-sequence parts of the library and therefore generate duplication and will therefore expect to see warnings or error from this module.\nIn RNA-Seq libraries sequences from different transcripts will be present at wildly different levels in the starting population. In order to be able to observe lowly expressed transcripts it is therefore common to greatly over-sequence high expressed transcripts, and this will potentially create large set of duplicates. This will result in high overall duplication in this test, and will often produce peaks in the higher duplication bins. This duplication will come from physically connected regions, and an examination of the distribution of duplicates in a specific genomic region will allow the distinction between over-sequencing and general technical duplication, but these distinctions are not possible from raw fastq files. A similar situation can arise in highly enriched ChIP-Seq libraries although the duplication there is less pronounced. Finally, if you have a library where the sequence start points are constrained (a library constructed around restriction sites for example, or an unfragmented small RNA library) then the constrained start sites will generate huge dupliction levels which should not be treated as a problem, nor removed by deduplication. In these types of library you should consider using a system such as random barcoding to allow the distinction of technical and biological duplicates.\n\n\n\nA.3.12 Overrepresented Sequences\n\nA.3.12.1 Summary\nA normal high-throughput library will contain a diverse set of sequences, with each individual sequence making up only a tiny fraction of the whole. Finding that a single sequence is very overrepresented in the set either means that it is highly biologically significant, or indicates that the library is contaminated, or not as diverse as you expected.\nThis module lists all of the sequences which make up more than 0.1% of the total. To conserve memory only sequences which appear in the first 100,000 sequences are tracked to the end of the file. It is therefore possible that a sequence which is overrepresented but doesn’t appear at the start of the file for some reason could be missed by this module.\nFor each overrepresented sequence the program will look for matches in a database of common contaminants and will report the best hit it finds. Hits must be at least 20bp in length and have no more than 1 mismatch. Finding a hit doesn’t necessarily mean that this is the source of the contamination, but may point you in the right direction. It’s also worth pointing out that many adapter sequences are very similar to each other so you may get a hit reported which isn’t technically correct, but which has very similar sequence to the actual match.\nBecause the duplication detection requires an exact sequence match over the whole length of the sequence any reads over 50bp in length are truncated to 50bp for the purposes of this analysis. Even so, longer reads are more likely to contain sequencing errors which will artificially increase the observed diversity and will tend to underrepresent highly duplicated sequences.\n\n\nA.3.12.2 Warning\nThis module will issue a warning if any sequence is found to represent more than 0.1% of the total.\n\n\nA.3.12.3 Failure\nThis module will issue an error if any sequence is found to represent more than 1% of the total.\n\n\nA.3.12.4 Common reasons for warnings\nThis module will often be triggered when used to analyse small RNA libraries where sequences are not subjected to random fragmentation, and the same sequence may natrually be present in a significant proportion of the library."
  },
  {
    "objectID": "a-fastqc.html#footnotes",
    "href": "a-fastqc.html#footnotes",
    "title": "Apéndice A — FastQC help",
    "section": "",
    "text": "Casava fastq format is the same as regular fastq except that the data is usually split across multiple files for a single sample. In this mode the program will merge the files in a sample group and present a single report for each sample. Also Casava fastq files contain poor quality sequences which have been flagged to be remove. In Casava mode the program will exclude these flagged sequences from the report.↩︎"
  }
]